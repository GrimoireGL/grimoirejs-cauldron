#!/usr/bin/env node

var yargs = require("yargs");
yargs.usage("<cmd> [args]").command('build', 'Build grimoirejs related project.', {
        port: {
            alias: "p",
            default: 8080,
            describe: "Port number used when '-s' was specified."
        },
        watch: {
            alias: "w",
            default: false,
            describe: "Should watch changes of source files and need build."
        },
        babel: {
            alias: "b",
            default: false,
            describe: "Needs babel generated es2016 bundled file into es2015 file."
        },
        minify: {
            alias: "m",
            default: false,
            describe: "Needs minify generated file.(Only works when '--babel' was specified.)"
        },
        server: {
            alias: "s",
            default: false,
            describe: "Execute server with the task. This option would be used with watch task basically."
        },
        noIndexReplace: {
            default: false,
            describe: "Not executing replace the meta comments of main typescript file."
        },
        noBundle: {
            default: false,
            describe: "Not executing bundling task"
        },
        babelSeparated: {
            default: false,
            describe: "Generate es5 files for each es6 files"
        }
    }, function(argv) {
        try {
            require("../lib/build/build");
        } catch (e) {
            console.log(e);
        }
    })
    .command('server', "Start server for the project", {
        port: {
            alias: "p",
            default: 8080,
            describe: "The port number that would be used."
        }
    }, function(argv) {
        require("../lib/server/server").default();
    }).command('scaffold', "Scaffold grimoirejs files", {
        name: {
            alias: "n",
            describe: "The name of the file which you want generate"
        },
        type: {
            alias: "t",
            describe: "The type of the file you want to generate"
        },
        force: {
            describe: "Force override scaffolded file even if destination file was already existing."
        }
    }, function() {
        require("../lib/scaffold/scaffold");
    })
    .command("doc", "Scaffold document files", {

    }, function() {
        require("../lib/doc/doc").default();
    })
    .command("txt2js", "Text files convert into js.", {
        src: {
            alias: "s",
            describe: "The folder of sources"
        },
        dest: {
            alias: "d",
            describe: "The folder to generate codes"
        },
        noDts: {
            describe: "Whether d.ts files should generated in source folder"
        },
        isCjs: {
            describe: "js file should generated in common js format or not"
        }
    }, function(argv) {
        require("../lib/build/txt2js").execTxt2Js(argv.s, argv.d, argv.isCjs, argv.noDts);
    }).command("wire", "Inject dependency(Internal use)", {
            name: {
                alias: "n",
                describe: "The package name to be used"
            }
        },
        function(argv) {
            require("../lib/wire/wire").wire();
        })
    .command("unwire", "Remove dependency(Internal use)", {
            name: {
                alias: "n",
                describe: "The package name to be removed"
            }
        },
        function(argv) {
            require("../lib/wire/wire").unwire();
        })
    .help().argv;
