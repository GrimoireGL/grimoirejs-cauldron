import {
    readFileAsync,
    writeFileAsync,
    ensureFileAsync
} from "../async-helper";
import {
    argv
} from "yargs";
export async function wire(){
    const pConfig = JSON.parse(await readFileAsync("package.json"));
    if (pConfig.name === argv.name) {
        return; // No needs to inject because this package is itself.
    } else {
        const dependencies = new Set();
        await ensureFileAsync(".grimoire.dependency");
        await readDependency(dependencies);
        if (!dependencies.has(argv.name)) {
            dependencies.add(argv.name);
        }
        await writeDependency(dependencies);
    }
};

export async function unwire(){
    const pConfig = JSON.parse(await readFileAsync("package.json"));
    if (pConfig.name === argv.name) {
        return; // No needs to inject because this package is itself.
    } else {
        const dependencies = new Set();
        await ensureFileAsync(".grimoire.dependency");
        await readDependency(dependencies);
        if (dependencies.has(argv.name)) {
            dependencies.delete(argv.name);
        }
        await writeDependency(dependencies);
    }
};

const writeDependency = async(dependencies) => {
    let txt = "; DO NOT EDIT THIS FILE MANUALLY.\n; このファイルを手動でいじらぬこと\n";
    for (const dependency of dependencies) {
        txt += `${dependency}\n`;
    }
    await writeFileAsync(".grimoire.dependency", txt);
}

const parseDependency = function*(text) {
    let next = "";
    let isComment = false;
    for (let i = 0; i < text.length; i++) {
        const c = text.charAt(i);
        if (c === ";") {
            isComment = true;
            continue;
        }
        if (c === "\n" && !isComment) {
            isComment = false;
            yield next;
            next = "";
            continue;
        }
        if (!isComment) {
            next += c;
        }
    }
}

const readDependency = async(dep) => {
    const txt = await readFileAsync(".grimoire.dependency");
    for (let dependency of parseDependency(txt)) {
        dep.add(dependency);
    }
};
